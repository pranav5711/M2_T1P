#include <iostream>
#include <vector>
#include <thread>

using namespace std;

void matrixMultiplication(const vector<vector<int>>& A, const vector<vector<int>>& B, vector<vector<int>>& C, int start, int end) {
    int n = A.size(), m = B[0].size(), p = B.size();

    for(int i=start; i<end; i++) {
        for(int j=0; j<m; j++) {
            int sum = 0;
            for(int k=0; k<p; k++) {
                sum += A[i][k] * B[k][j];
            }
            C[i][j] = sum;
        }
    }
}

int main() {
    vector<vector<int>> A = {{1,2,3},{4,5,6}};
    vector<vector<int>> B = {{7,8},{9,10},{11,12}};
    vector<vector<int>> C(A.size(), vector<int>(B[0].size()));

    const int numThreads = 2;
    vector<thread> threads(numThreads);

    int chunkSize = A.size() / numThreads;
    int start = 0, end = 0;

    for(int i=0; i<numThreads; i++) {
        start = i * chunkSize;
        end = (i == numThreads-1) ? A.size() : (i+1) * chunkSize;
        threads[i] = thread(matrixMultiplication, ref(A), ref(B), ref(C), start, end);
    }

    for(int i=0; i<numThreads; i++) {
        threads[i].join();
    }

    for(auto& row : C) {
        for(auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }

    return 0;
    }
